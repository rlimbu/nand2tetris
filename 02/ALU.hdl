// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
   // Completed: 2018-04-04
   
   // create 16-bit zero constant   
   Not16(in=true, out=outZeroes16);
   
   // zero out x input if zx is set  
   Mux16(a=x, b=outZeroes16, sel = zx, out=outx0);
   
   // negate x if nx is set. this is bit-wise negating
   Not16(in=outx0, out=outx1);
   Mux16(a=outx0, b=outx1, sel = nx, out=outx2);
   
   // zero out y if zy is set
   Mux16(a=y, b=outZeroes16, sel=zy, out=outy0);
   
   // negate y if ny is set. this is bit-wise negating
   Not16(in=outy0, out=outy1);
   Mux16(a=outy0, b=outy1, sel = ny, out=outy2);
   
   // calculuate x+y
   Add16(a=outx2, b=outy2, out=outxplusy);
   
   // calculuate x and y
   And16(a=outx2, b=outy2, out=outxandy);
   
   // if f is set, output x+y. else, output x and y
   Mux16(a=outxandy, b=outxplusy, sel=f, out=outf);
   
   // if no is set, negate the output. this is bit-wise negating
   Not16(in=outf, out=outneg1);
   Mux16(a=outf, b=outneg1, sel=no, out=out, out[0..7]=out0to7, out[8..15]=out8to15, out[15]=out15);
   
   // set zr if output is 0
   Or8Way(in=out0to7, out=outzr0);
   Or8Way(in=out8to15, out=outzr1);
   Or(a=outzr0, b=outzr1, out=zr2);
   Not(in=zr2, out=zr);
   
   // set ng if output is negative
   Or(a=false, b=out15, out=ng);
   
}